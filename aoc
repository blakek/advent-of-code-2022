#!/usr/bin/env bash

##
# Gets the answer for a given day
##

__dirname="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

panic() {
	echo "$@" >&2
	exit 1
}

showUsage() {
	cat <<-EOF
		Usage: aoc <day> <part> [options]

		Optional arguments:
		  -d, --day       The date to get the answer for (1-25). If AoC is occurring,
		                  this defaults to today's date.
		  -p, --part      The part to get the answer for (1, 2, or "all").
		  -h, --help      Show this help message and exit.
		  -l, --language  The language to use (awk, bash, python, ruby, etc.).
		                  See languages in each day's directory. If not specified, a
						  language will be chosen based on the current directory.
		  -t, --test      Run against the example input instead of the full input.
	EOF
}

aoc() {
	# Default arguments
	if [[ "$(date +%Y-%m)" == "2022-12" ]]; then
		day="$(date +%d)"
	else
		day="25"
	fi

	part="part-*"
	language=""
	inputFile="input.txt"

	# Parse arguments
	while [[ $# -gt 0 ]]; do
		case "$1" in
			-d | --day)
				if [[ $2 =~ [0-9] ]]; then
					day="0$2"
				elif [[ $2 =~ [0-9]{2} ]]; then
					day="$2"
				else
					echo "Invalid day: $2" >&2
					exit 1
				fi
				shift 2
				;;
			-p | --part)
				if [[ $2 == "all" ]]; then
					part="part-*"
				else
					part="part-$2.*"
				fi
				shift 2
				;;
			-h | --help)
				showUsage
				return
				;;
			-l | --language)
				language="$2"
				shift 2
				;;
			-t | --test)
				inputFile="example.txt"
				shift
				;;
			*)
				echo "Unknown argument: $1"
				showUsage
				return 1
				;;
		esac
	done

	# Validate arguments
	if [[ $day -lt 1 || $day -gt 25 ]]; then
		echo "Day must be between 1 and 25"
		return 1
	fi

	if [[ $part != "part-1.*" && $part != "part-2.*" && $part != "part-*" ]]; then
		echo "Part must be 1, 2, or all"
		return 1
	fi

	# Get the language
	if [[ $language == '' ]]; then
		# langauge is the first directory in the day directory that's not _input
		language="$(ls "${__dirname}/day-${day}" | grep -v _input | grep -v README.md | head -n 1)"

		if [[ $language == '' ]]; then
			panic "No solutions found for day ${day}"
		fi
	fi

	dayDir="${__dirname}/day-${day}"
	inputFilePath="${dayDir}/_input/${inputFile}"
	partFilePath="${dayDir}/${language}/${part}"

	for part in $partFilePath; do
		if [[ -f $part ]]; then
			case "$language" in
				awk)
					runCommand="awk -f ${part} ${inputFilePath}"
					;;
				typescript)
					runCommand="ts-node ${part} ${inputFilePath}"
					;;
				*)
					panic "Don't know how to run $language"
					;;
			esac

			echo "Solution for ${part}:"

			$runCommand
		fi
	done
}

aoc "$@"
